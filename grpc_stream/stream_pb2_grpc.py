# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import stream_pb2 as stream__pb2


class ReturnPurchasesStub(object):
    """SERVICE:
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.return_data = channel.unary_stream(
                '/ReturnPurchases/return_data',
                request_serializer=stream__pb2.get_req.SerializeToString,
                response_deserializer=stream__pb2.DataFrame.FromString,
                )


class ReturnPurchasesServicer(object):
    """SERVICE:
    """

    def return_data(self, request, context):
        """stream 3 tables (dataframes)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReturnPurchasesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'return_data': grpc.unary_stream_rpc_method_handler(
                    servicer.return_data,
                    request_deserializer=stream__pb2.get_req.FromString,
                    response_serializer=stream__pb2.DataFrame.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ReturnPurchases', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReturnPurchases(object):
    """SERVICE:
    """

    @staticmethod
    def return_data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ReturnPurchases/return_data',
            stream__pb2.get_req.SerializeToString,
            stream__pb2.DataFrame.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
